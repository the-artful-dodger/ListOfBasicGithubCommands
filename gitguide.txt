git init    									// TO initialize repository
git add .   									//adds changes either newor modified files ( . means all and add filename.txt means that particular filename 
													to the staging directory between the working copy on the pc and the online repository)
git commit -m "This is our first commit"  		//save snapshot
git log 										//to view list of commits
git status              						//compares working directory with synchronized project to check if there are any changes.
git diff 										// showcases the changes that have been made to a modified file but only changes between system copy and staging area.
													not between staging area and repository
git diff --staged								//showcases differences between staging area and repository

git rm filename.txt								//Removes file from both repository and working copy
												BUT THE CHANGES HAVE NOT BEEN COMMITTED. YOU ALSO NEED TO COMMIT.
												ONLY THE add THING IS NOT REWUIRED.
TO rename a file, we either
{
git add newfilename.txt
and then
git rm oldfilename.txt										
}
or
{git mv oldfilename.txt newfilename.txt}

and then
git comit	



git commit -am 									//Commit straight from system working directory to repository without the need for a astaging area
												// But dont use this if you have deleted/moved files
												
git checkout -- filename.txt					//if your working copy has been messed up, it takes the modified file from repository and makes it your working copy


git reset HEAD filename.txt                     //Unstages a file and brings it out of the staging area.

To go back to a commit, first
git log to get the commit number you want to go to
suppose commit number is : 01e7dba57711386ff etc etc you only need the first few characters and also the filename you want to revert to like this:

git checkout 01e7dba -- index.html

and then

git commit

to finalize our changes